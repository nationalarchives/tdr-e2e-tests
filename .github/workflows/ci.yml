name: End to end tests
on:
  pull_request:
  workflow_dispatch:
    inputs:
      browser:
        description: 'The browser used to run the tests'
        type: choice
        required: false
        options:
          - Chrome
          - Firefox
        default: 'Firefox'
      environment:
        description: 'Environment'
        type: choice
        options:
          - intg
          - staging
          - prod
        required: true
        default: 'intg'
      wait:
        description: 'The time in seconds to wait before starting the tests'
        required: false
        default: '0'
permissions:
  id-token: write
  contents: read
jobs:
  setup-e2e-tests:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.generate-files.outputs.files }}
      environment: ${{ steps.set-secret-names.outputs.environment }}
      account_number_secret: ${{ steps.set-secret-names.outputs.account_number_secret }}
      user_admin_secret: ${{ steps.set-secret-names.outputs.user_admin_secret }}
      backend_checks_secret: ${{ steps.set-secret-names.outputs.backend_checks_secret }}
      title_environment: ${{ steps.set-secret-names.outputs.title_environment }}
      is_pr: ${{ steps.set-secret-names.outputs.is_pr }}
      last_status: ${{ steps.get-last-status.outputs.last_status }}
      driver: ${{ steps.get-driver.outputs.driver }}
      lambda-name: ${{ steps.get-driver.outputs.lambda-name }}
      node-ip: ${{ steps.start-ecs.outputs.node-ip }}
      task-id: ${{ steps.start-ecs.outputs.task-id }}
    steps:
      - name: Wait
        run: sleep ${{ github.event.inputs.wait != '' && github.event.inputs.wait || '0' }}
      - name: Checkout
        uses: actions/checkout@v2
      - id: get-last-status
        run: pip install requests && python .github/scripts/get_last_status.py
      - id: set-secret-names
        run: python .github/scripts/set_secret_names.py ${{ github.event.inputs.environment }}
      - name: Set feature file names
        id: generate-files
        run: |
          FILES=$(ls src/test/resources/features/ | jq -R -s -c 'split("\n")[:-1]')
          echo ::set-output name=files::${FILES}
      - name: Use a new role here
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets[steps.set-secret-names.outputs.account_number_secret] }}:role/TestRunECSTaskRole${{ steps.set-secret-names.outputs.title_environment }}
          aws-region: eu-west-2
          role-session-name: StartECS
      - id: start-ecs
        run: |
          pip install boto3
          python .github/scripts/start_ecs_task.py ${{ github.event.inputs.environment }} ${{ github.event.inputs.browser }}
          sleep 15
  run-e2e-tests:
    runs-on: ubuntu-latest
    needs:
      - setup-e2e-tests
    strategy:
      matrix:
        file: ${{ fromJSON(needs.setup-e2e-tests.outputs.files) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets[needs.setup-e2e-tests.outputs.account_number_secret] }}:role/TestRunE2ELambdaRole${{ needs.setup-e2e-tests.outputs.title_environment }}
          aws-region: eu-west-2
          role-session-name: UpdateWAF
      - name: Run Tests
        run: |
          aws lambda invoke --cli-read-timeout 370 --function-name tdr-e2e-tests-${{ github.event.inputs.environment }} --cli-binary-format raw-in-base64-out --payload '{ "feature": "${{ matrix.file }}", "browser": "${{ github.event.inputs.browser }}", "nodeIp": "${{ needs.setup-e2e-tests.outputs.node-ip }}" }' out > response
          ! jq -e '.FunctionError' response
  send-messages:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - run-e2e-tests
      - setup-e2e-tests
    steps:
      - name: Use a new role here
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets[needs.setup-e2e-tests.outputs.account_number_secret] }}:role/TestRunECSTaskRole${{ needs.setup-e2e-tests.outputs.title_environment }}
          aws-region: eu-west-2
          role-session-name: StopECS
      - uses: actions/checkout@v3
      - run: |
          sleep 30
          pip install boto3
          python .github/scripts/stop_ecs_task.py ${{ github.event.inputs.environment }} ${{ needs.setup-e2e-tests.outputs.task-id }}
